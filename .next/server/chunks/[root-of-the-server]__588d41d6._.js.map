{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Ashton%20Medina/OneDrive/Ash%20FIles/Coding/SaaS-Starter-Ash-main/lib/db/schema.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  varchar,\n  text,\n  timestamp,\n  jsonb,\n  pgEnum,\n} from 'drizzle-orm/pg-core';\nimport { relations } from 'drizzle-orm';\n\n// Enums\nexport const membershipRoleEnum = pgEnum('membership_role', ['admin', 'member']);\nexport const eventTypeEnum = pgEnum('event_type', ['scan', 'click', 'visit']);\n\n// Organizations table\nexport const organizations = pgTable('organizations', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  name: text('name').notNull(),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n});\n\n// Memberships table (user â†” org with role)\nexport const memberships = pgTable('memberships', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  userId: uuid('user_id').notNull(), // References auth.users(id)\n  orgId: uuid('org_id').notNull().references(() => organizations.id, { onDelete: 'cascade' }),\n  role: membershipRoleEnum('role').notNull().default('member'),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n});\n\n// Portals table\nexport const portals = pgTable('portals', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  orgId: uuid('org_id').notNull().references(() => organizations.id, { onDelete: 'cascade' }),\n  name: text('name'),\n  slug: text('slug').unique(),\n  destinationUrl: text('destination_url'),\n  theme: jsonb('theme'),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n});\n\n// Portal events table\nexport const portalEvents = pgTable('portal_events', {\n  id: uuid('id').primaryKey().defaultRandom(),\n  portalId: uuid('portal_id').notNull().references(() => portals.id, { onDelete: 'cascade' }),\n  userId: uuid('user_id'), // References auth.users(id)\n  eventType: eventTypeEnum('event_type').notNull(),\n  metadata: jsonb('metadata'),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n});\n\n// Relations\nexport const organizationsRelations = relations(organizations, ({ many }) => ({\n  memberships: many(memberships),\n  portals: many(portals),\n}));\n\nexport const membershipsRelations = relations(memberships, ({ one }) => ({\n  organization: one(organizations, {\n    fields: [memberships.orgId],\n    references: [organizations.id],\n  }),\n}));\n\nexport const portalsRelations = relations(portals, ({ one, many }) => ({\n  organization: one(organizations, {\n    fields: [portals.orgId],\n    references: [organizations.id],\n  }),\n  events: many(portalEvents),\n}));\n\nexport const portalEventsRelations = relations(portalEvents, ({ one }) => ({\n  portal: one(portals, {\n    fields: [portalEvents.portalId],\n    references: [portals.id],\n  }),\n}));\n\n// Types\nexport type Organization = typeof organizations.$inferSelect;\nexport type NewOrganization = typeof organizations.$inferInsert;\nexport type Membership = typeof memberships.$inferSelect;\nexport type NewMembership = typeof memberships.$inferInsert;\nexport type Portal = typeof portals.$inferSelect;\nexport type NewPortal = typeof portals.$inferInsert;\nexport type PortalEvent = typeof portalEvents.$inferSelect;\nexport type NewPortalEvent = typeof portalEvents.$inferInsert;\n\n// Extended types with relations\nexport type OrganizationWithMembers = Organization & {\n  memberships: Membership[];\n};\n\nexport type PortalWithEvents = Portal & {\n  events: PortalEvent[];\n};\n\nexport type OrganizationWithPortals = Organization & {\n  portals: Portal[];\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 218, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Ashton%20Medina/OneDrive/Ash%20FIles/Coding/SaaS-Starter-Ash-main/lib/db/drizzle.ts"],"sourcesContent":["import { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\nimport * as schema from './schema';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nif (!process.env.POSTGRES_URL) {\n  throw new Error('POSTGRES_URL environment variable is not set');\n}\n\nexport const client = postgres(process.env.POSTGRES_URL);\nexport const db = drizzle(client, { schema });\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEA,2LAAA,CAAA,UAAM,CAAC,MAAM;AAEb,IAAI,CAAC,QAAQ,GAAG,CAAC,YAAY,EAAE;IAC7B,MAAM,IAAI,MAAM;AAClB;AAEO,MAAM,SAAS,CAAA,GAAA,+LAAA,CAAA,UAAQ,AAAD,EAAE,QAAQ,GAAG,CAAC,YAAY;AAChD,MAAM,KAAK,CAAA,GAAA,mQAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 290, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Ashton%20Medina/OneDrive/Ash%20FIles/Coding/SaaS-Starter-Ash-main/lib/supabase.ts"],"sourcesContent":["// lib/supabase.ts\nimport { createBrowserClient, createServerClient } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\n\nexport const supabase = createBrowserClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n)\n\nexport const createClient = () => {\n  const cookieStore = cookies()\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll()\n        },\n        setAll(cookiesToSet: { name: string; value: string; options?: any }[]) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            )\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    }\n  )\n}\n"],"names":[],"mappings":"AAAA,kBAAkB;;;;;AAClB;AAAA;AAAA;AACA;;;AAEO,MAAM,WAAW,CAAA,GAAA,yRAAA,CAAA,sBAAmB,AAAD;AAKnC,MAAM,eAAe;IAC1B,MAAM,cAAc,CAAA,GAAA,0OAAA,CAAA,UAAO,AAAD;IAE1B,OAAO,CAAA,GAAA,wRAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAA8D;gBACnE,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;gBAEjC,EAAE,OAAM;gBACN,0DAA0D;gBAC1D,wDAAwD;gBACxD,iBAAiB;gBACnB;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 325, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Ashton%20Medina/OneDrive/Ash%20FIles/Coding/SaaS-Starter-Ash-main/lib/auth/session.ts"],"sourcesContent":["import { createClient } from '@/lib/supabase';\nimport { User } from '@supabase/supabase-js';\n\nexport async function getSession() {\n  const supabase = createClient();\n  const { data: { session }, error } = await supabase.auth.getSession();\n  \n  if (error || !session) {\n    return null;\n  }\n  \n  return session;\n}\n\nexport async function getUser(): Promise<User | null> {\n  const session = await getSession();\n  return session?.user || null;\n}\n\nexport async function signOut() {\n  const supabase = createClient();\n  await supabase.auth.signOut();\n}\n\nexport async function signInWithEmail(email: string, password: string) {\n  const supabase = createClient();\n  const { data, error } = await supabase.auth.signInWithPassword({\n    email,\n    password,\n  });\n  \n  return { data, error };\n}\n\nexport async function signUpWithEmail(email: string, password: string) {\n  const supabase = createClient();\n  const { data, error } = await supabase.auth.signUp({\n    email,\n    password,\n  });\n  \n  return { data, error };\n}\n\nexport async function resetPassword(email: string) {\n  const supabase = createClient();\n  const { data, error } = await supabase.auth.resetPasswordForEmail(email, {\n    redirectTo: `${process.env.BASE_URL}/auth/reset-password`,\n  });\n  \n  return { data, error };\n}\n\nexport async function updatePassword(password: string) {\n  const supabase = createClient();\n  const { data, error } = await supabase.auth.updateUser({\n    password,\n  });\n  \n  return { data, error };\n}\n"],"names":[],"mappings":";;;;;;;;;AAAA;;AAGO,eAAe;IACpB,MAAM,WAAW,CAAA,GAAA,iHAAA,CAAA,eAAY,AAAD;IAC5B,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,UAAU;IAEnE,IAAI,SAAS,CAAC,SAAS;QACrB,OAAO;IACT;IAEA,OAAO;AACT;AAEO,eAAe;IACpB,MAAM,UAAU,MAAM;IACtB,OAAO,SAAS,QAAQ;AAC1B;AAEO,eAAe;IACpB,MAAM,WAAW,CAAA,GAAA,iHAAA,CAAA,eAAY,AAAD;IAC5B,MAAM,SAAS,IAAI,CAAC,OAAO;AAC7B;AAEO,eAAe,gBAAgB,KAAa,EAAE,QAAgB;IACnE,MAAM,WAAW,CAAA,GAAA,iHAAA,CAAA,eAAY,AAAD;IAC5B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,kBAAkB,CAAC;QAC7D;QACA;IACF;IAEA,OAAO;QAAE;QAAM;IAAM;AACvB;AAEO,eAAe,gBAAgB,KAAa,EAAE,QAAgB;IACnE,MAAM,WAAW,CAAA,GAAA,iHAAA,CAAA,eAAY,AAAD;IAC5B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,MAAM,CAAC;QACjD;QACA;IACF;IAEA,OAAO;QAAE;QAAM;IAAM;AACvB;AAEO,eAAe,cAAc,KAAa;IAC/C,MAAM,WAAW,CAAA,GAAA,iHAAA,CAAA,eAAY,AAAD;IAC5B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,qBAAqB,CAAC,OAAO;QACvE,YAAY,GAAG,QAAQ,GAAG,CAAC,QAAQ,CAAC,oBAAoB,CAAC;IAC3D;IAEA,OAAO;QAAE;QAAM;IAAM;AACvB;AAEO,eAAe,eAAe,QAAgB;IACnD,MAAM,WAAW,CAAA,GAAA,iHAAA,CAAA,eAAY,AAAD;IAC5B,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,UAAU,CAAC;QACrD;IACF;IAEA,OAAO;QAAE;QAAM;IAAM;AACvB","debugId":null}},
    {"offset": {"line": 398, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Ashton%20Medina/OneDrive/Ash%20FIles/Coding/SaaS-Starter-Ash-main/lib/db/queries.ts"],"sourcesContent":["import { desc, and, eq } from 'drizzle-orm';\nimport { db } from './drizzle';\nimport { organizations, memberships, portals, portalEvents } from './schema';\nimport { getUser } from '@/lib/auth/session';\n\nexport async function getUserOrganization() {\n  const user = await getUser();\n  if (!user) {\n    return null;\n  }\n\n  const result = await db.query.memberships.findFirst({\n    where: eq(memberships.userId, user.id),\n    with: {\n      organization: {\n        with: {\n          memberships: {\n            with: {\n              organization: true\n            }\n          },\n          portals: true\n        }\n      }\n    }\n  });\n\n  return result?.organization || null;\n}\n\nexport async function getUserMemberships() {\n  const user = await getUser();\n  if (!user) {\n    return [];\n  }\n\n  return await db.query.memberships.findMany({\n    where: eq(memberships.userId, user.id),\n    with: {\n      organization: true\n    }\n  });\n}\n\nexport async function getOrganizationPortals(orgId: string) {\n  return await db.query.portals.findMany({\n    where: eq(portals.orgId, orgId),\n    with: {\n      events: {\n        orderBy: desc(portalEvents.createdAt),\n        limit: 10\n      }\n    }\n  });\n}\n\nexport async function getPortalEvents(portalId: string) {\n  return await db.query.portalEvents.findMany({\n    where: eq(portalEvents.portalId, portalId),\n    orderBy: desc(portalEvents.createdAt),\n    limit: 50\n  });\n}\n\nexport async function createPortal(orgId: string, portalData: {\n  name: string;\n  slug: string;\n  destinationUrl: string;\n  theme?: any;\n}) {\n  const [portal] = await db.insert(portals).values({\n    orgId,\n    ...portalData\n  }).returning();\n\n  return portal;\n}\n\nexport async function createPortalEvent(portalId: string, eventData: {\n  userId?: string;\n  eventType: 'scan' | 'click' | 'visit';\n  metadata?: any;\n}) {\n  const [event] = await db.insert(portalEvents).values({\n    portalId,\n    ...eventData\n  }).returning();\n\n  return event;\n}\n\nexport async function updatePortal(portalId: string, updates: {\n  name?: string;\n  slug?: string;\n  destinationUrl?: string;\n  theme?: any;\n}) {\n  const [portal] = await db.update(portals)\n    .set(updates)\n    .where(eq(portals.id, portalId))\n    .returning();\n\n  return portal;\n}\n\nexport async function deletePortal(portalId: string) {\n  await db.delete(portals).where(eq(portals.id, portalId));\n}\n\nexport async function getOrganizationMembers(orgId: string) {\n  return await db.query.memberships.findMany({\n    where: eq(memberships.orgId, orgId),\n    with: {\n      organization: true\n    }\n  });\n}\n\nexport async function addOrganizationMember(orgId: string, userId: string, role: 'admin' | 'member' = 'member') {\n  const [membership] = await db.insert(memberships).values({\n    orgId,\n    userId,\n    role\n  }).returning();\n\n  return membership;\n}\n\nexport async function removeOrganizationMember(orgId: string, userId: string) {\n  await db.delete(memberships).where(\n    and(\n      eq(memberships.orgId, orgId),\n      eq(memberships.userId, userId)\n    )\n  );\n}\n\nexport async function updateMemberRole(orgId: string, userId: string, role: 'admin' | 'member') {\n  const [membership] = await db.update(memberships)\n    .set({ role })\n    .where(\n      and(\n        eq(memberships.orgId, orgId),\n        eq(memberships.userId, userId)\n      )\n    )\n    .returning();\n\n  return membership;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 523, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Ashton%20Medina/OneDrive/Ash%20FIles/Coding/SaaS-Starter-Ash-main/app/api/user/route.ts"],"sourcesContent":["import { getUser } from '@/lib/db/queries';\n\nexport async function GET() {\n  const user = await getUser();\n  return Response.json(user);\n}\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe;IACpB,MAAM,OAAO,MAAM,CAAA,GAAA,sHAAA,CAAA,UAAO,AAAD;IACzB,OAAO,SAAS,IAAI,CAAC;AACvB","debugId":null}}]
}